/**
 * Generated by Scrooge
 *   version: 18.4.0
 *   rev: b64bcb47af2451b2e51a1ed1b3876f6c06c642b3
 *   built at: 20180410-144039
 */
package ch.unibas.cs.gravis.realsense

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object CaptureResult extends ValidatingThriftStructCodec3[CaptureResult] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("CaptureResult")
  val ImageField = new TField("image", TType.STRUCT, 1)
  val ImageFieldManifest = implicitly[Manifest[ch.unibas.cs.gravis.realsense.ThriftImage]]
  val Landmarks2dField = new TField("landmarks2d", TType.LIST, 2)
  val Landmarks2dFieldManifest = implicitly[Manifest[Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark2D]]]
  val LandmarksField = new TField("landmarks", TType.LIST, 3)
  val LandmarksFieldManifest = implicitly[Manifest[Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark]]]
  val MeshField = new TField("mesh", TType.STRUCT, 4)
  val MeshFieldManifest = implicitly[Manifest[ch.unibas.cs.gravis.realsense.ThriftVertexColorMesh]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      ImageField,
      false,
      true,
      ImageFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      Landmarks2dField,
      true,
      false,
      Landmarks2dFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[ch.unibas.cs.gravis.realsense.ThriftLandmark2D]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      LandmarksField,
      false,
      true,
      LandmarksFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[ch.unibas.cs.gravis.realsense.ThriftLandmark]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      MeshField,
      false,
      true,
      MeshFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: CaptureResult): Unit = {
    if (_item.image == null) throw new TProtocolException("Required field image cannot be null")
    if (_item.landmarks == null) throw new TProtocolException("Required field landmarks cannot be null")
    if (_item.mesh == null) throw new TProtocolException("Required field mesh cannot be null")
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: CaptureResult): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    if (item.image == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(0))
    buf ++= validateField(item.image)
    buf ++= validateField(item.landmarks2d)
    if (item.landmarks == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(2))
    buf ++= validateField(item.landmarks)
    if (item.mesh == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(3))
    buf ++= validateField(item.mesh)
    buf.toList
  }

  def withoutPassthroughFields(original: CaptureResult): CaptureResult =
    new Immutable(
      image =
        {
          val field = original.image
          ch.unibas.cs.gravis.realsense.ThriftImage.withoutPassthroughFields(field)
        },
      landmarks2d =
        {
          val field = original.landmarks2d
          field.map { field =>
            field.map { field =>
              ch.unibas.cs.gravis.realsense.ThriftLandmark2D.withoutPassthroughFields(field)
            }
          }
        },
      landmarks =
        {
          val field = original.landmarks
          field.map { field =>
            ch.unibas.cs.gravis.realsense.ThriftLandmark.withoutPassthroughFields(field)
          }
        },
      mesh =
        {
          val field = original.mesh
          ch.unibas.cs.gravis.realsense.ThriftVertexColorMesh.withoutPassthroughFields(field)
        }
    )

  override def encode(_item: CaptureResult, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): CaptureResult = {

    var image: ch.unibas.cs.gravis.realsense.ThriftImage = null
    var _got_image = false
    var landmarks2d: Option[Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark2D]] = None
    var landmarks: Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark] = Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark]()
    var _got_landmarks = false
    var mesh: ch.unibas.cs.gravis.realsense.ThriftVertexColorMesh = null
    var _got_mesh = false

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                image = readImageValue(_iprot)
                _got_image = true
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'image' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.LIST =>
    
                landmarks2d = Some(readLandmarks2dValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'landmarks2d' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.LIST =>
    
                landmarks = readLandmarksValue(_iprot)
                _got_landmarks = true
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'landmarks' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                mesh = readMeshValue(_iprot)
                _got_mesh = true
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'mesh' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_image) throw new TProtocolException("Required field 'image' was not found in serialized data for struct CaptureResult")
    if (!_got_landmarks) throw new TProtocolException("Required field 'landmarks' was not found in serialized data for struct CaptureResult")
    if (!_got_mesh) throw new TProtocolException("Required field 'mesh' was not found in serialized data for struct CaptureResult")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      image,
      landmarks2d,
      landmarks,
      mesh,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): CaptureResult =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[realsense] def eagerDecode(_iprot: TProtocol): CaptureResult = {
    var image: ch.unibas.cs.gravis.realsense.ThriftImage = null
    var _got_image = false
    var landmarks2d: _root_.scala.Option[Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark2D]] = _root_.scala.None
    var landmarks: Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark] = Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark]()
    var _got_landmarks = false
    var mesh: ch.unibas.cs.gravis.realsense.ThriftVertexColorMesh = null
    var _got_mesh = false
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
                image = readImageValue(_iprot)
                _got_image = true
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'image' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.LIST =>
                landmarks2d = _root_.scala.Some(readLandmarks2dValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'landmarks2d' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.LIST =>
                landmarks = readLandmarksValue(_iprot)
                _got_landmarks = true
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'landmarks' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRUCT =>
                mesh = readMeshValue(_iprot)
                _got_mesh = true
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'mesh' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_image) throw new TProtocolException("Required field 'image' was not found in serialized data for struct CaptureResult")
    if (!_got_landmarks) throw new TProtocolException("Required field 'landmarks' was not found in serialized data for struct CaptureResult")
    if (!_got_mesh) throw new TProtocolException("Required field 'mesh' was not found in serialized data for struct CaptureResult")
    new Immutable(
      image,
      landmarks2d,
      landmarks,
      mesh,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    image: ch.unibas.cs.gravis.realsense.ThriftImage,
    landmarks2d: _root_.scala.Option[Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark2D]] = _root_.scala.None,
    landmarks: Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark] = Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark](),
    mesh: ch.unibas.cs.gravis.realsense.ThriftVertexColorMesh
  ): CaptureResult =
    new Immutable(
      image,
      landmarks2d,
      landmarks,
      mesh
    )

  def unapply(_item: CaptureResult): _root_.scala.Option[_root_.scala.Tuple4[ch.unibas.cs.gravis.realsense.ThriftImage, Option[Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark2D]], Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark], ch.unibas.cs.gravis.realsense.ThriftVertexColorMesh]] = _root_.scala.Some(_item.toTuple)


  @inline private[realsense] def readImageValue(_iprot: TProtocol): ch.unibas.cs.gravis.realsense.ThriftImage = {
    ch.unibas.cs.gravis.realsense.ThriftImage.decode(_iprot)
  }

  @inline private def writeImageField(image_item: ch.unibas.cs.gravis.realsense.ThriftImage, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ImageField)
    writeImageValue(image_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeImageValue(image_item: ch.unibas.cs.gravis.realsense.ThriftImage, _oprot: TProtocol): Unit = {
    image_item.write(_oprot)
  }

  @inline private[realsense] def readLandmarks2dValue(_iprot: TProtocol): Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark2D] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[ch.unibas.cs.gravis.realsense.ThriftLandmark2D](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          ch.unibas.cs.gravis.realsense.ThriftLandmark2D.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeLandmarks2dField(landmarks2d_item: Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark2D], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(Landmarks2dField)
    writeLandmarks2dValue(landmarks2d_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeLandmarks2dValue(landmarks2d_item: Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark2D], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, landmarks2d_item.size))
    landmarks2d_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = landmarks2d_item.size
        while (_i < _size) {
          val landmarks2d_item_element = landmarks2d_item(_i)
          landmarks2d_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        landmarks2d_item.foreach { landmarks2d_item_element =>
          landmarks2d_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[realsense] def readLandmarksValue(_iprot: TProtocol): Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[ch.unibas.cs.gravis.realsense.ThriftLandmark](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          ch.unibas.cs.gravis.realsense.ThriftLandmark.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeLandmarksField(landmarks_item: Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(LandmarksField)
    writeLandmarksValue(landmarks_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeLandmarksValue(landmarks_item: Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, landmarks_item.size))
    landmarks_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = landmarks_item.size
        while (_i < _size) {
          val landmarks_item_element = landmarks_item(_i)
          landmarks_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        landmarks_item.foreach { landmarks_item_element =>
          landmarks_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[realsense] def readMeshValue(_iprot: TProtocol): ch.unibas.cs.gravis.realsense.ThriftVertexColorMesh = {
    ch.unibas.cs.gravis.realsense.ThriftVertexColorMesh.decode(_iprot)
  }

  @inline private def writeMeshField(mesh_item: ch.unibas.cs.gravis.realsense.ThriftVertexColorMesh, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MeshField)
    writeMeshValue(mesh_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMeshValue(mesh_item: ch.unibas.cs.gravis.realsense.ThriftVertexColorMesh, _oprot: TProtocol): Unit = {
    mesh_item.write(_oprot)
  }


  object Immutable extends ThriftStructCodec3[CaptureResult] {
    override def encode(_item: CaptureResult, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): CaptureResult = CaptureResult.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[CaptureResult] = CaptureResult.metaData
  }

  /**
   * The default read-only implementation of CaptureResult.  You typically should not need to
   * directly reference this class; instead, use the CaptureResult.apply method to construct
   * new instances.
   */
  class Immutable(
      val image: ch.unibas.cs.gravis.realsense.ThriftImage,
      val landmarks2d: _root_.scala.Option[Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark2D]],
      val landmarks: Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark],
      val mesh: ch.unibas.cs.gravis.realsense.ThriftVertexColorMesh,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends CaptureResult {
    def this(
      image: ch.unibas.cs.gravis.realsense.ThriftImage,
      landmarks2d: _root_.scala.Option[Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark2D]] = _root_.scala.None,
      landmarks: Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark] = Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark](),
      mesh: ch.unibas.cs.gravis.realsense.ThriftVertexColorMesh
    ) = this(
      image,
      landmarks2d,
      landmarks,
      mesh,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val image: ch.unibas.cs.gravis.realsense.ThriftImage,
      val landmarks2d: _root_.scala.Option[Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark2D]],
      val landmarks: Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark],
      val mesh: ch.unibas.cs.gravis.realsense.ThriftVertexColorMesh,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends CaptureResult {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }


    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the CaptureResult trait with additional state or
   * behavior and implement the read-only methods from CaptureResult using an underlying
   * instance.
   */
  trait Proxy extends CaptureResult {
    protected def _underlying_CaptureResult: CaptureResult
    override def image: ch.unibas.cs.gravis.realsense.ThriftImage = _underlying_CaptureResult.image
    override def landmarks2d: _root_.scala.Option[Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark2D]] = _underlying_CaptureResult.landmarks2d
    override def landmarks: Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark] = _underlying_CaptureResult.landmarks
    override def mesh: ch.unibas.cs.gravis.realsense.ThriftVertexColorMesh = _underlying_CaptureResult.mesh
    override def _passthroughFields = _underlying_CaptureResult._passthroughFields
  }
}

/**
 * Prefer the companion object's [[ch.unibas.cs.gravis.realsense.CaptureResult.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait CaptureResult
  extends ThriftStruct
  with _root_.scala.Product4[ch.unibas.cs.gravis.realsense.ThriftImage, Option[Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark2D]], Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark], ch.unibas.cs.gravis.realsense.ThriftVertexColorMesh]
  with ValidatingThriftStruct[CaptureResult]
  with java.io.Serializable
{
  import CaptureResult._

  def image: ch.unibas.cs.gravis.realsense.ThriftImage
  def landmarks2d: _root_.scala.Option[Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark2D]]
  def landmarks: Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark]
  def mesh: ch.unibas.cs.gravis.realsense.ThriftVertexColorMesh

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = image
  def _2 = landmarks2d
  def _3 = landmarks
  def _4 = mesh

  def toTuple: _root_.scala.Tuple4[ch.unibas.cs.gravis.realsense.ThriftImage, Option[Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark2D]], Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark], ch.unibas.cs.gravis.realsense.ThriftVertexColorMesh] = {
    (
      image,
      landmarks2d,
      landmarks,
      mesh
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (image ne null) {
                writeImageValue(image, _oprot)
                _root_.scala.Some(CaptureResult.ImageField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (landmarks2d.isDefined) {
                writeLandmarks2dValue(landmarks2d.get, _oprot)
                _root_.scala.Some(CaptureResult.Landmarks2dField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (landmarks ne null) {
                writeLandmarksValue(landmarks, _oprot)
                _root_.scala.Some(CaptureResult.LandmarksField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (mesh ne null) {
                writeMeshValue(mesh, _oprot)
                _root_.scala.Some(CaptureResult.MeshField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): CaptureResult = {
    var image: ch.unibas.cs.gravis.realsense.ThriftImage = this.image
    var landmarks2d: _root_.scala.Option[Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark2D]] = this.landmarks2d
    var landmarks: Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark] = this.landmarks
    var mesh: ch.unibas.cs.gravis.realsense.ThriftVertexColorMesh = this.mesh
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        image = readImageValue(_blob.read)
      case 2 =>
        landmarks2d = _root_.scala.Some(readLandmarks2dValue(_blob.read))
      case 3 =>
        landmarks = readLandmarksValue(_blob.read)
      case 4 =>
        mesh = readMeshValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      image,
      landmarks2d,
      landmarks,
      mesh,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): CaptureResult = {
    var image: ch.unibas.cs.gravis.realsense.ThriftImage = this.image
    var landmarks2d: _root_.scala.Option[Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark2D]] = this.landmarks2d
    var landmarks: Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark] = this.landmarks
    var mesh: ch.unibas.cs.gravis.realsense.ThriftVertexColorMesh = this.mesh

    _fieldId match {
      case 1 =>
        image = null
      case 2 =>
        landmarks2d = _root_.scala.None
      case 3 =>
        landmarks = Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark]()
      case 4 =>
        mesh = null
      case _ =>
    }
    new Immutable(
      image,
      landmarks2d,
      landmarks,
      mesh,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetImage: CaptureResult = unsetField(1)

  def unsetLandmarks2d: CaptureResult = unsetField(2)

  def unsetLandmarks: CaptureResult = unsetField(3)

  def unsetMesh: CaptureResult = unsetField(4)


  override def write(_oprot: TProtocol): Unit = {
    CaptureResult.validate(this)
    _oprot.writeStructBegin(Struct)
    if (image ne null) writeImageField(image, _oprot)
    if (landmarks2d.isDefined) writeLandmarks2dField(landmarks2d.get, _oprot)
    if (landmarks ne null) writeLandmarksField(landmarks, _oprot)
    if (mesh ne null) writeMeshField(mesh, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    image: ch.unibas.cs.gravis.realsense.ThriftImage = this.image,
    landmarks2d: _root_.scala.Option[Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark2D]] = this.landmarks2d,
    landmarks: Seq[ch.unibas.cs.gravis.realsense.ThriftLandmark] = this.landmarks,
    mesh: ch.unibas.cs.gravis.realsense.ThriftVertexColorMesh = this.mesh,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): CaptureResult =
    new Immutable(
      image,
      landmarks2d,
      landmarks,
      mesh,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[CaptureResult]

  private def _equals(x: CaptureResult, y: CaptureResult): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator)

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[CaptureResult]) &&
      _passthroughFields == other.asInstanceOf[CaptureResult]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => this.image
    case 1 => this.landmarks2d
    case 2 => this.landmarks
    case 3 => this.mesh
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "CaptureResult"

  def _codec: ValidatingThriftStructCodec3[CaptureResult] = CaptureResult
}

