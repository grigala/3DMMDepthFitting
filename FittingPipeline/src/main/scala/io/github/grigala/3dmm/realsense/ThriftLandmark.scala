/**
 * Generated by Scrooge
 *   version: 18.4.0
 *   rev: b64bcb47af2451b2e51a1ed1b3876f6c06c642b3
 *   built at: 20180410-144039
 */
package ch.unibas.cs.gravis.realsense

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object ThriftLandmark extends ValidatingThriftStructCodec3[ThriftLandmark] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("ThriftLandmark")
  val NameField = new TField("name", TType.STRING, 1)
  val NameFieldManifest = implicitly[Manifest[String]]
  val PointField = new TField("point", TType.STRUCT, 2)
  val PointFieldManifest = implicitly[Manifest[ch.unibas.cs.gravis.realsense.ThriftPoint3D]]
  val UncertaintyField = new TField("uncertainty", TType.STRUCT, 3)
  val UncertaintyFieldManifest = implicitly[Manifest[ch.unibas.cs.gravis.realsense.ThriftUncertaintyCovariance]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      NameField,
      false,
      true,
      NameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      PointField,
      false,
      true,
      PointFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      UncertaintyField,
      true,
      false,
      UncertaintyFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: ThriftLandmark): Unit = {
    if (_item.name == null) throw new TProtocolException("Required field name cannot be null")
    if (_item.point == null) throw new TProtocolException("Required field point cannot be null")
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: ThriftLandmark): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    if (item.name == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(0))
    buf ++= validateField(item.name)
    if (item.point == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(1))
    buf ++= validateField(item.point)
    buf ++= validateField(item.uncertainty)
    buf.toList
  }

  def withoutPassthroughFields(original: ThriftLandmark): ThriftLandmark =
    new Immutable(
      name =
        {
          val field = original.name
          field
        },
      point =
        {
          val field = original.point
          ch.unibas.cs.gravis.realsense.ThriftPoint3D.withoutPassthroughFields(field)
        },
      uncertainty =
        {
          val field = original.uncertainty
          field.map { field =>
            ch.unibas.cs.gravis.realsense.ThriftUncertaintyCovariance.withoutPassthroughFields(field)
          }
        }
    )

  override def encode(_item: ThriftLandmark, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): ThriftLandmark = {

    var nameOffset: Int = -1
    var _got_name = false
    var point: ch.unibas.cs.gravis.realsense.ThriftPoint3D = null
    var _got_point = false
    var uncertainty: Option[ch.unibas.cs.gravis.realsense.ThriftUncertaintyCovariance] = None

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                nameOffset = _iprot.offsetSkipString
    
                _got_name = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'name' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                point = readPointValue(_iprot)
                _got_point = true
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'point' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                uncertainty = Some(readUncertaintyValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'uncertainty' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_name) throw new TProtocolException("Required field 'name' was not found in serialized data for struct ThriftLandmark")
    if (!_got_point) throw new TProtocolException("Required field 'point' was not found in serialized data for struct ThriftLandmark")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      nameOffset,
      point,
      uncertainty,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): ThriftLandmark =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[realsense] def eagerDecode(_iprot: TProtocol): ThriftLandmark = {
    var name: String = null
    var _got_name = false
    var point: ch.unibas.cs.gravis.realsense.ThriftPoint3D = null
    var _got_point = false
    var uncertainty: _root_.scala.Option[ch.unibas.cs.gravis.realsense.ThriftUncertaintyCovariance] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                name = readNameValue(_iprot)
                _got_name = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'name' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRUCT =>
                point = readPointValue(_iprot)
                _got_point = true
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'point' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRUCT =>
                uncertainty = _root_.scala.Some(readUncertaintyValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'uncertainty' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_name) throw new TProtocolException("Required field 'name' was not found in serialized data for struct ThriftLandmark")
    if (!_got_point) throw new TProtocolException("Required field 'point' was not found in serialized data for struct ThriftLandmark")
    new Immutable(
      name,
      point,
      uncertainty,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    name: String,
    point: ch.unibas.cs.gravis.realsense.ThriftPoint3D,
    uncertainty: _root_.scala.Option[ch.unibas.cs.gravis.realsense.ThriftUncertaintyCovariance] = _root_.scala.None
  ): ThriftLandmark =
    new Immutable(
      name,
      point,
      uncertainty
    )

  def unapply(_item: ThriftLandmark): _root_.scala.Option[_root_.scala.Tuple3[String, ch.unibas.cs.gravis.realsense.ThriftPoint3D, Option[ch.unibas.cs.gravis.realsense.ThriftUncertaintyCovariance]]] = _root_.scala.Some(_item.toTuple)


  @inline private[realsense] def readNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeNameField(name_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(NameField)
    writeNameValue(name_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeNameValue(name_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(name_item)
  }

  @inline private[realsense] def readPointValue(_iprot: TProtocol): ch.unibas.cs.gravis.realsense.ThriftPoint3D = {
    ch.unibas.cs.gravis.realsense.ThriftPoint3D.decode(_iprot)
  }

  @inline private def writePointField(point_item: ch.unibas.cs.gravis.realsense.ThriftPoint3D, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(PointField)
    writePointValue(point_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writePointValue(point_item: ch.unibas.cs.gravis.realsense.ThriftPoint3D, _oprot: TProtocol): Unit = {
    point_item.write(_oprot)
  }

  @inline private[realsense] def readUncertaintyValue(_iprot: TProtocol): ch.unibas.cs.gravis.realsense.ThriftUncertaintyCovariance = {
    ch.unibas.cs.gravis.realsense.ThriftUncertaintyCovariance.decode(_iprot)
  }

  @inline private def writeUncertaintyField(uncertainty_item: ch.unibas.cs.gravis.realsense.ThriftUncertaintyCovariance, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(UncertaintyField)
    writeUncertaintyValue(uncertainty_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeUncertaintyValue(uncertainty_item: ch.unibas.cs.gravis.realsense.ThriftUncertaintyCovariance, _oprot: TProtocol): Unit = {
    uncertainty_item.write(_oprot)
  }


  object Immutable extends ThriftStructCodec3[ThriftLandmark] {
    override def encode(_item: ThriftLandmark, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): ThriftLandmark = ThriftLandmark.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[ThriftLandmark] = ThriftLandmark.metaData
  }

  /**
   * The default read-only implementation of ThriftLandmark.  You typically should not need to
   * directly reference this class; instead, use the ThriftLandmark.apply method to construct
   * new instances.
   */
  class Immutable(
      val name: String,
      val point: ch.unibas.cs.gravis.realsense.ThriftPoint3D,
      val uncertainty: _root_.scala.Option[ch.unibas.cs.gravis.realsense.ThriftUncertaintyCovariance],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends ThriftLandmark {
    def this(
      name: String,
      point: ch.unibas.cs.gravis.realsense.ThriftPoint3D,
      uncertainty: _root_.scala.Option[ch.unibas.cs.gravis.realsense.ThriftUncertaintyCovariance] = _root_.scala.None
    ) = this(
      name,
      point,
      uncertainty,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      nameOffset: Int,
      val point: ch.unibas.cs.gravis.realsense.ThriftPoint3D,
      val uncertainty: _root_.scala.Option[ch.unibas.cs.gravis.realsense.ThriftUncertaintyCovariance],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends ThriftLandmark {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val name: String =
      if (nameOffset == -1)
        null
      else {
        _proto.decodeString(_buf, nameOffset)
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the ThriftLandmark trait with additional state or
   * behavior and implement the read-only methods from ThriftLandmark using an underlying
   * instance.
   */
  trait Proxy extends ThriftLandmark {
    protected def _underlying_ThriftLandmark: ThriftLandmark
    override def name: String = _underlying_ThriftLandmark.name
    override def point: ch.unibas.cs.gravis.realsense.ThriftPoint3D = _underlying_ThriftLandmark.point
    override def uncertainty: _root_.scala.Option[ch.unibas.cs.gravis.realsense.ThriftUncertaintyCovariance] = _underlying_ThriftLandmark.uncertainty
    override def _passthroughFields = _underlying_ThriftLandmark._passthroughFields
  }
}

/**
 * Prefer the companion object's [[ch.unibas.cs.gravis.realsense.ThriftLandmark.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait ThriftLandmark
  extends ThriftStruct
  with _root_.scala.Product3[String, ch.unibas.cs.gravis.realsense.ThriftPoint3D, Option[ch.unibas.cs.gravis.realsense.ThriftUncertaintyCovariance]]
  with ValidatingThriftStruct[ThriftLandmark]
  with java.io.Serializable
{
  import ThriftLandmark._

  def name: String
  def point: ch.unibas.cs.gravis.realsense.ThriftPoint3D
  def uncertainty: _root_.scala.Option[ch.unibas.cs.gravis.realsense.ThriftUncertaintyCovariance]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = name
  def _2 = point
  def _3 = uncertainty

  def toTuple: _root_.scala.Tuple3[String, ch.unibas.cs.gravis.realsense.ThriftPoint3D, Option[ch.unibas.cs.gravis.realsense.ThriftUncertaintyCovariance]] = {
    (
      name,
      point,
      uncertainty
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (name ne null) {
                writeNameValue(name, _oprot)
                _root_.scala.Some(ThriftLandmark.NameField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (point ne null) {
                writePointValue(point, _oprot)
                _root_.scala.Some(ThriftLandmark.PointField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (uncertainty.isDefined) {
                writeUncertaintyValue(uncertainty.get, _oprot)
                _root_.scala.Some(ThriftLandmark.UncertaintyField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): ThriftLandmark = {
    var name: String = this.name
    var point: ch.unibas.cs.gravis.realsense.ThriftPoint3D = this.point
    var uncertainty: _root_.scala.Option[ch.unibas.cs.gravis.realsense.ThriftUncertaintyCovariance] = this.uncertainty
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        name = readNameValue(_blob.read)
      case 2 =>
        point = readPointValue(_blob.read)
      case 3 =>
        uncertainty = _root_.scala.Some(readUncertaintyValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      name,
      point,
      uncertainty,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): ThriftLandmark = {
    var name: String = this.name
    var point: ch.unibas.cs.gravis.realsense.ThriftPoint3D = this.point
    var uncertainty: _root_.scala.Option[ch.unibas.cs.gravis.realsense.ThriftUncertaintyCovariance] = this.uncertainty

    _fieldId match {
      case 1 =>
        name = null
      case 2 =>
        point = null
      case 3 =>
        uncertainty = _root_.scala.None
      case _ =>
    }
    new Immutable(
      name,
      point,
      uncertainty,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetName: ThriftLandmark = unsetField(1)

  def unsetPoint: ThriftLandmark = unsetField(2)

  def unsetUncertainty: ThriftLandmark = unsetField(3)


  override def write(_oprot: TProtocol): Unit = {
    ThriftLandmark.validate(this)
    _oprot.writeStructBegin(Struct)
    if (name ne null) writeNameField(name, _oprot)
    if (point ne null) writePointField(point, _oprot)
    if (uncertainty.isDefined) writeUncertaintyField(uncertainty.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    name: String = this.name,
    point: ch.unibas.cs.gravis.realsense.ThriftPoint3D = this.point,
    uncertainty: _root_.scala.Option[ch.unibas.cs.gravis.realsense.ThriftUncertaintyCovariance] = this.uncertainty,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): ThriftLandmark =
    new Immutable(
      name,
      point,
      uncertainty,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[ThriftLandmark]

  private def _equals(x: ThriftLandmark, y: ThriftLandmark): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator)

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[ThriftLandmark]) &&
      _passthroughFields == other.asInstanceOf[ThriftLandmark]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 3

  override def productElement(n: Int): Any = n match {
    case 0 => this.name
    case 1 => this.point
    case 2 => this.uncertainty
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "ThriftLandmark"

  def _codec: ValidatingThriftStructCodec3[ThriftLandmark] = ThriftLandmark
}

